<!--_Check-->
<!--
    OrganizerActiveCheck
    活動排隊check

    1.檢查排隊使用者的順序
    2.顯示cheak欄位
    3.更改排隊號碼的欄位狀況
 -->
<!---->
<div id="app">
    <div class="container mt-3">
        <h4>活動編號 : {{activityId}}</h4>
        <h5>活動名稱 : {{activityName}}</h5>
        <div>
            <span>{{startTime}}</span> ~ <span>{{endTime}}</span>
        </div>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>訂單編號</th> <!--OrderId-->
                    <th>使用者名稱</th><!--UserName-->
                    <th>排隊號碼</th><!--WaitingNumber-->
                    <th>識別碼</th><!--ActivityBarcode-->
                    <th>簽到狀態</th><!--Checked-->
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="book in BookOrder" style="height:75px;margin:auto">
                    <td>{{ book.orderId }}</td>
                    <td>{{ book.userName }}</td>
                    <td>{{ book.waitingNumber }}</td>
                    <td>{{ book.activityBarcode }}</td>
                    <td :class="{'text-secondary': book.checked, 'text-danger': !book.checked}">{{ book.checked ? '已簽到' : '未簽到' }}</td>
                    <td>
                        <button class="btn btn-secondary btn-sm"
                                :btn-Barcode="book.activityBarcode"
                                :waitNum="book.waitingNumber"
                                v-show="!book.checked"
                                @@click="check">
                            確認簽到
                        </button>

                        <button class="btn btn-primary btn-sm"
                                :btn-Barcode="book.activityBarcode"
                                :waitNum="book.waitingNumber"
                                v-show="book.checked"
                                @@click="uncheck">
                            解除簽到
                        </button>
                         
                    </td>
                </tr>
            </tbody>

        </table>

    </div>
</div>

<script src="https://unpkg.com/vue@3.4.26/dist/vue.global.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.30.1/moment.min.js"></script>

<script>

    //路徑
        vuebase = "https://localhost:7271"
        //活動方id && 活動專屬ID
        organizerid = sessionStorage.getItem("OrganizerId");
        // console.log(organizerid)
        ActId = sessionStorage.getItem("ActID");
        // console.log(ActId)
    

         vueApp = {
            data() {
                return {
                    //活動資訊
                    activityId: "",
                    activityName: "",
                    startTime: "",
                    endTime: "",

                    //排隊資訊
                    BookOrder: [],
                    orderId: "",
                    userName: "",
                    waitingNumber: "",
                    activityBarcode: "",
                    checked: "",
                }
            },
            methods: {
                //活動資訊
                ActInfo: function () {
                    // alert("list"); // 可以暫時移除
                    let _this = this;

                    axios.get(`/Confirm/ActiveInfo/${ActId}`)
                        .then(response => {
                            // 在這裡處理成功的回應
                            var res = response.data
                            // console.log(res);
                            _this.activityId = res[0].activityId

                            if (res[0].activityName != null) {
                                _this.activityName = res[0].activityName
                            }
                            else {
                                _this.activityName = "沒有名稱"
                            }

                            _this.startTime = moment(res[0].StartTime).format('YYYY-MM-DD/HH')
                            _this.endTime = moment(res[0].EndTime).format('YYYY-MM-DD/HH')
                        })
                        .catch(err => {
                            alert(err);
                            // 在這裡處理失敗的回應
                        });
                },
                //排隊訂單資訊
                BookInfo: function () {
                    let _this = this;
                    // alert("Book")
                    axios.get(`/Confirm/BookInfo/${ActId}`)
                        .then(response => {
                            // console.log(response)
                            res = response.data
                            // 清空 BookOrder 陣列
                            _this.BookOrder = [];

                            // 將每個項目添加到 BookOrder 陣列中
                            res.forEach(item => {
                                _this.BookOrder.push({
                                    orderId: item.orderId,
                                    userName: item.userName,
                                    waitingNumber: item.waitingNumber,
                                    activityBarcode: item.activityBarcode,
                                    checked: item.checked
                                });
                            });
                        })
                        .catch(err => {
                            alert(err)
                        });
                },
                //簽到按鈕
                check: function () {
                    let _this = this;
                    // alert("check");
                    // 從事件對象(event object)中取得觸發事件的按鈕元素
                    const btn = event.target;

                    // 從按鈕元素中取得自定義屬性"btn-id"
                    const btnBarcode = btn.getAttribute("btn-Barcode");
                    // console.log(btnBarcode);
                    const waitNum1 = btn.getAttribute("waitNum");
                    // console.log(waitNum1);
                    var ret = confirm("確認簽到?");
                    if (ret == true) {
                        axios.post(`/Confirm/TransCheck/?Barcode=${btnBarcode}&waitNum=${waitNum1}`)
                            .then(res => { _this.BookInfo(); })
                            .catch(err => { alert(err) })
                    }
                },
                uncheck: function () {
                    let _this = this;
                    // alert("check");
                    // 從事件對象(event object)中取得觸發事件的按鈕元素
                    const btn = event.target;

                    // 從按鈕元素中取得自定義屬性"btn-id"
                    const btnBarcode = btn.getAttribute("btn-Barcode");
                    // console.log(btnBarcode);
                    const waitNum1 = btn.getAttribute("waitNum");
                    // console.log(waitNum1);


                    var ret = confirm("確認解除?");
                    if (ret == true) {
                        axios.post(`/Confirm/TransUnCheck/?Barcode=${btnBarcode}&waitNum=${waitNum1}`)
                            .then(res => { _this.BookInfo(); })
                            .catch(err => { alert(err) })
                    }

                }
            },
            mounted: function () {
                let _this = this;
                _this.ActInfo();
                _this.BookInfo();

                window.addEventListener('beforeunload', function (event) {
                    // 在用戶離開頁面時重新加載頁面
                    location.reload();
                });
            }
        };


        Vue.createApp(vueApp).mount("#app");
    

  
</script>

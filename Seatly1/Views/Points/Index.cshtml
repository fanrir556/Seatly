@section Styles {
  <style>
    @*轉場動畫*@#animationTrans {
      position: fixed;
      top: 0;
      left: 0;
      margin: 0;
      padding: 0;
      height: 100vh;
      min-width: 100%;
      overflow: hidden;
      z-index: 20;
      background-color: white;
      animation-duration: 0.2s;
    }

    .animationP {
      position: absolute;
      background-color: rgba(231, 49, 64, 0.5);
      left: 0;
      height: 5vh;
      min-width: 100%;
      z-index: 1;
    }

    .ball {
      position: absolute;
      width: 50px;
      height: 50px;
      animation: drop 0.8s linear forwards;
    }

    @@keyframes drop {
      0% {
        bottom: 100vh;
        transform: translateX(-50%);
      }

      100% {
        bottom: -50px;
        transform: translateX(-50%);
      }
    }

    @@keyframes earthquake {
      0% {
        left: 20px;
      }

      25% {
        left: -20px;
      }

      50% {
        left: 20px;
      }

      75% {
        left: -20px;
      }

      100% {
        left: 20px;
      }
    }

    /*轉場動畫*/
    section {
      padding: 0 !important;
    }

    .table {
      --bs-table-striped-bg: rgba(231, 49, 64, 0.05);
    }

    .edited {
      box-shadow: 0 0 3px 3px pink;
    }

    .lacked {
      box-shadow: 0 0 5px 5px red;
    }

    [v-cloak] {
      display: none;
    }

    /*------ Settings ------*/
    .uicontainer {
      --color: #a5a5b0;
      --size: 15px;
      display: flex;
      justify-content: center;
      align-items: center;
      position: relative;
      cursor: pointer;
      font-size: var(--size);
      user-select: none;
      fill: var(--color);
    }

    .uicontainer .chevron-down {
      position: absolute;
      animation: keyframes-return .5s;
    }

    .sorting {
      --color: pink;
      fill: var(--color);
    }

    /* ------ On check event ------ */
    .uicontainer input:checked~.chevron-down {
      animation: keyframes-rotate .5s;
      transform: rotate(180deg);
    }

    /* ------ Hide the default checkbox ------ */
    .uicontainer input {
      position: absolute;
      opacity: 0;
      cursor: pointer;
      height: 0;
      width: 0;
    }

    /* ------ Animation ------ */
    @@keyframes keyframes-rotate {
      0% {
        transform: rotate(0deg);
        opacity: 0;
      }

      100% {
        transform: rotate(-180deg);
      }
    }

    @@keyframes keyframes-return {
      0% {
        transform: rotate(-180deg);
        opacity: 0;
      }

      100% {
        transform: rotate(0deg);
      }
    }
  </style>
}


@{
  ViewData["Title"] = "點數專區";
}

@* 防偽標籤 生成(會是個 input hidden 元素) *@
@Html.AntiForgeryToken()

<div id="PointsApp">
  <section>
    @* 轉場動畫 *@
    <div id="animationTrans" @@click="skipTrans($event)">
      <p v-for="i in Array.from({ length: 10 }, (_, j) => j * 10)" :key="i" class="animationP"
        :style="{ top: i + 'vh' }"></p>
    </div>
    @* 轉場動畫 *@
  </section>

  <div class="row m-4 mb-2">
    <h2 v-if="strPoint == 'pointsShop'" class="text-gradient">{{isMg ? '點數商城(管理者模式)' : '點數商城'}}</h2>
    <h2 v-else-if="strPoint == 'coupon'" class="text-gradient">持有優惠券</h2>
    <h2 v-else-if="strPoint == 'pointsHistory'" class="text-gradient">{{isMg ? '點數交易紀錄(管理者模式)' : '點數交易紀錄'}}</h2>
  </div>

  <div class="row ps-5 pe-5 m-0">
    <div class="col-12 col-md-2 p-3">
      <ul class="list-group">
        <li class="list-group-item bg-white">
          <a class="dropdown-item text-gradient" @@click.prevent="pointStore">點數商城</a>
        </li>
        <li v-if="!isMg" class="list-group-item bg-white">
          <a class="dropdown-item text-gradient" @@click.prevent="coupon">持有優惠券</a>
        </li>
        <li class="list-group-item bg-white">
          <a class="dropdown-item text-gradient" @@click.prevent="history">點數交易紀錄</a>
        </li>
      </ul>
    </div>
    <div class="col-12 col-md-10 p-3">
      <div v-if="isLoading" id="topLoading" role="img" class="wheel-and-queuely">
        <div class="wheel"></div>
        <img src="~/images/queuelyhome.png" class="queuely" />
        <div class="spoke"></div>
      </div>
      <!-- ------------shop------------ -->
      <section v-else-if="strPoint == 'pointsShop' && !isLoading" v-cloak>
        <div>
          <button class="btn btn-gradient mb-2 me-1 btn-cate"
            @@click="searchTerm.cate = null;searchTerm.keyword = null;this.$refs.pdSearch.value = '';showProducts()">全部</button>
          @* <button
          v-for="cate in results.shops.map(shop => shop.category).filter((value, index, self) => self.indexOf(value)
          === index)"
          :key="cate" class="btn btn-gradient mb-2 me-1 btn-cate"
          @@click="searchTerm.cate = cate; showProducts()">{{cate}}</button> *@
          <button v-for="cate in results.sList" :key="cate" class="btn btn-gradient mb-2 me-1 btn-cate"
            @@click="searchTerm.cate = cate;searchTerm.keyword = null;this.$refs.pdSearch.value = '';showProducts()">{{cate}}</button>
        </div>

        <div class="d-flex align-items-center">
          <label for="pdSearch" class="text-gradient form-label m-0">關鍵字:</label>
          <input id="pdSearch" ref="pdSearch" class="form-control ms-2 me-2 w-25" autocomplete="off"
            @@change="this.$refs.pdSearch.value = this.$refs.pdSearch.value.trim()" />
          <button class="btn btn-gradient me-1"
            @@click="searchTerm.keyword = this.$refs.pdSearch.value.trim();showProducts()">搜尋</button>
          <button class="btn btn-gradient"
            @@click="searchTerm.keyword = null;this.$refs.pdSearch.value = '';showProducts()">清除搜尋</button>
        </div>
        <div class="d-flex justify-content-end align-items-center">
          <span class="me-2">每頁顯示<select v-model="searchTerm.pgSize" @@change="showProducts()">
              <option value="10">10</option>
              <option value="25">25</option>
              <option value="50">50</option>
              <option value="100">100</option>
            </select>筆資料。</span>
          <button class="btn btn-gradient me-1 p-0" @@click="pP" style="width: 30px; height: 30px; text-align: center"
            :disabled="firstPage">
            上
          </button>
          第
          <input class="me-1 p-0" v-model="searchTerm.pgNum" @@change="showProducts()"
            style="width: 30px; height: 30px; text-align: center" min="1" />
          頁，共<span>{{ results.totalPg }}</span>頁
          <button class="btn btn-gradient me-1 p-0" @@click="nP" style="width: 30px; height: 30px; text-align: center"
            :disabled="lastPage">
            下
          </button>
        </div>

        <div class="col-12" id="pointsContentBody">
          <!-- ------------MG------------ -->
          <section v-if="isMg == true">
            <section v-if="results.totalPg >= 1">
              <div class="d-flex justify-content-between mt-1">
                <button class="btn btn-gradient mb-2 me-1" @@click="isAdding = !isAdding;addPd($event)">新增商品</button>
                <button class="btn btn-gradient mb-2 me-1" @@click="saveEditPds">儲存修改</button>
                <button v-if="isAdding" class="btn btn-gradient mb-2 me-1" @@click="saveAddPd">
                  儲存新增
                </button>
                <button class="btn btn-gradient mb-2 ms-auto" @@click="deletePds">刪除勾選商品</button>
              </div>
              <div id="requiredContent"></div>
              <table class="table table-striped text-center">
                <thead>
                  <tr>
                    <th v-for="(dName, index) in results.dNames" :key="dName" @@click="changeSort(dName)">
                      <label>{{ dName }}</label>
                      <label v-if="index === 0 || index === 3 || index === 4" class="uicontainer"
                        :class="index == 0 ? 'sorting' : ''">
                        <input class="sorts" :checked="index == 0"
                          :data-sortBy="index == 0 ? 'id': index == 3 ? 'price' : index == 4 ? 'cate' : ''"
                          @@click="($event.target.parentElement?.previousElementSibling ?? null)?.click()"
                          type="checkbox">
                        <svg viewBox="0 0 512 512" height="1em" xmlns="http://www.w3.org/2000/svg" class="chevron-down">
                          <path
                            d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z">
                          </path>
                        </svg>
                      </label>
                    </th>
                    <th style="width: 50px">刪除</th>
                  </tr>
                </thead>
                <tbody>
                  <tr v-if="isAdding" class="align-middle" id="newPd">
                    <td></td>
                    <td>
                      <img :src="noImgUrl" class="img-fluid rounded" style="width: 100px" alt="..." title=".." />
                      <input class="form-control p-0 pimg" type="file" accept="image/*" @@change="addPd($event)" />
                    </td>
                    <td><input class="form-control p-0 text-center ms-auto me-auto" style="width: 120px" type="text"
                        @@blur="addPd($event,`ProductName`)" />
                    </td>
                    <td><input class="form-control p-0 text-center ms-auto me-auto" style="width: 80px" type="number"
                        min="0" @@blur="addPd($event)" />
                    </td>
                    <td>
                      <select v-if="addCategory == false" class="form-control p-0 text-center ms-auto me-auto"
                        @@blur="addPd($event,`Category`)">
                        <option disabled selected value="">請選擇</option>
                        <option v-for="cate in results.sList" :key="cate" :value="cate">{{ cate }}</option>
                      </select>
                      <input v-else class="form-control p-0 text-center ms-auto me-auto" style="width: 104px;"
                        placeholder="請輸入類別" @@blur="addPd($event,`Category`)" />
                      <p class="text-gradient"
                        @@click="addCategory = !addCategory;addPd($event);$event.target.textContent = addCategory ? '選擇類別?' :'新增類別?'">
                        新增類別?</p>
                    </td>
                    <td><textarea class="form-control p-0" @@blur="addPd($event,`ProductDescription`)"></textarea></td>
                    <td></td>
                  </tr>
                  <tr v-for="{
          productId,
          productName,
          category,
          productPrice,
          productDescription,
          productImage,
        } in results.shops" :key="productId" class="align-middle">
                    <td>{{productId}}</td>
                    <td>
                      <img :src="productImage" class="img-fluid rounded" style="width: 100px" :alt="productName"
                        :title="productName" />
                      <input class="form-control p-0 pimg" type="file" accept="image/*"
                        @@change="editPds(productId,`productImage`,$event)" />
                    </td>
                    <td>
                      <input class="form-control p-0 text-center ms-auto me-auto" style="width: 120px" type="text"
                        :value="productName" @@change="editPds(productId,`productName`,$event)" />
                    </td>
                    <td>
                      <input class="form-control p-0 text-center ms-auto me-auto" style="width: 80px" type="number"
                        :value="productPrice" @@change="editPds(productId,`productPrice`,$event)" />
                    </td>
                    <td>
                      <select class="form-control p-0 text-center ms-auto me-auto" :value="category"
                        @@change="editPds(productId,`category`,$event)">
                        <option v-for="cate in results.sList" :key="cate" :value="cate">{{ cate }}</option>
                      </select>
                    </td>
                    <td>
                      <textarea class="form-control p-0 ms-auto me-auto"
                        @@change="editPds(productId,`productDescription`,$event)">{{ productDescription }}</textarea>
                    </td>
                    <td><input type="checkbox" class="form-check-input"
                        @@change="if (!($event.target.checked)) deleteList = deleteList.filter(id => id != productId); else deleteList.push(productId);" />
                    </td>
                  </tr>
                </tbody>
              </table>
            </section>
            <section v-else>
              <h3 class="text-gradient">查無商品!!</h3>
            </section>
          </section>
          <!-- ------------MG------------ -->
          <section v-else-if="results.totalPg >= 1">
            <div v-if="results.userPoints != null">
              <div class="text-gradient d-inline">您目前持有:</div>
              <div class="d-inline ms-2 me-2">
                {{ results.userPoints }}
              </div>
              <div class="text-gradient d-inline">點數</div>
            </div>
            <div v-for="{
      productId,
      productName,
      category,
      productPrice,
      productDescription,
      productImage
    } in results.shops" :key="productId" class="card mb-3">
              <div class="row g-0">
                <div class="col-md-4">
                  <img :src="productImage" class="img-fluid rounded-start" style="width: 300px" :alt="productName"
                    :title="productName" />
                </div>
                <div class="col-md-8">
                  <div class="card-body">
                    <span class="position-absolute end-0 me-2">{{ category }}</span>
                    <h5 class="card-title text-gradient fs-3">{{ productName }}</h5>
                    <p class="card-text">{{ productDescription }}</p>
                    <p class="card-text text-gradient">{{ productPrice === 0 ? "免費!!" : `兌換需要 ${productPrice} 點數` }}</p>
                    <button class="btn btn-gradient position-absolute bottom-0 end-0 mb-1 me-1 btn-exchange"
                      @@click="pdExchange(productId)"
                      :disabled="results.userPoints < productPrice && results.userPoints != null">
                      兌換
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </section>
          <section v-else>
            <h3 class="text-gradient">查無商品!!</h3>
          </section>
        </div>

        <!-- Modal -->
        <div class="modal fade" id="exchangeModal" ref="exchangeModal" tabindex="-1"
          aria-labelledby="exchangeModalLabel" aria-hidden="true">
          <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="exchangeModalLabel">您確定要兌換嗎?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <section v-if="exchangeRes == ''">
                <div class="modal-body" id="exchangeModalBody">
                  <div class="row g-0">
                    <div class="col-12 d-flex justify-content-center">
                      <img :src="exchangePd.img" class="img-fluid rounded-start" style="width:150px"
                        title="exchangePd.name">
                    </div>
                    <div class="col-12">
                      <div>
                        <div class="text-gradient d-inline">商品名稱:</div>
                        <div class="d-inline ms-2">{{exchangePd.name}}</div>
                      </div>
                      <div>
                        <div class="text-gradient d-inline">商品價格:</div>
                        <div class="d-inline ms-2 me-2" id="pdPoints">{{exchangePd.price}}
                        </div>
                        <div class="text-gradient d-inline">點數</div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="modal-footer">
                  <button class="btn btn-gradient p-0 text-align-center" style="width: 100px; height: 45px"
                    @@click="confirmExchange">
                    確認兌換
                  </button>
                  <button class="btn btn-secondary p-0 text-align-center" style="width: 100px; height: 45px"
                    data-bs-dismiss="modal">
                    取消
                  </button>
                </div>
              </section>
              <section v-else>
                <h2 class="col-12 text-gradient text-center">{{exchangeRes}}</h2>
              </section>
            </div>
          </div>
        </div>
        <!-- Modal -->
      </section>
      <!-- ------------shop------------ -->

      <!-- ------------coupon------------ -->
      <section v-else-if="strPoint == 'coupon' && !isLoading" v-cloak>
        <section v-if="results.totalPg >= 1">
          <div class="d-flex justify-content-end align-items-center">
            <span class="me-2">每頁顯示<select v-model="searchTerm.pgSize" @@change="showCoupons()">
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
              </select>筆資料。</span>
            <button class="btn btn-gradient me-1 p-0" @@click="pP" style="width: 30px; height: 30px; text-align: center"
              :disabled="firstPage">
              上
            </button>
            第
            <input class="me-1 p-0" v-model="searchTerm.pgNum" @@change="showCoupons()"
              style="width: 30px; height: 30px; text-align: center" min="1" />
            頁，共<span>{{ results.totalPg }}</span>頁
            <button class="btn btn-gradient me-1 p-0" @@click="nP" style="width: 30px; height: 30px; text-align: center"
              :disabled="lastPage">
              下
            </button>
          </div>

          <div class="col-12" id="couponContentBody">
            <div v-for="{id,memberId,productId,transactionDate,active,pd} in results.trans" :key="id" class="card mb-3">
              <div class="row g-0">
                <div class="col-md-4">
                  <img :src="pd.productImage" class="img-fluid rounded-start" style="width:300px" :alt="pd.productName"
                    :title="pd.productName">
                </div>
                <div class="col-md-8">
                  <div class="card-body">
                    <span class="position-absolute end-0 me-2">{{pd.category}}</span>
                    <h5 class="card-title text-gradient fs-3">{{pd.productName}}</h5>
                    <p class="card-text">{{pd.productDescription}}</p>
                    <button class="btn btn-gradient position-absolute bottom-0 end-0 mb-1 me-1 btn-coupon"
                      data-bs-toggle="modal" data-bs-target="#couponModal"
                      @@click="couponRes = '';useCoupon(pd, id)">使用</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>
        <section v-else>
          <h3 class="text-gradient">目前未持有可用優惠券</h3>
        </section>

        <!-- Modal -->
        <div class="modal fade" id="couponModal" tabindex="-1" aria-labelledby="couponModalLabel" aria-hidden="true">
          <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="couponModalLabel">{{couponRes == '' ? '您確定要使用嗎?' : '使用成功!'}}</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                  @@click="couponRes = '';showCoupons()"></button>
              </div>
              <section v-if="couponRes == ''">
                <div class="modal-body" id="couponModalBody">
                  <div class="row g-0">
                    <div class="col-12 d-flex justify-content-center">
                      <img :src="exchangePd.img" class="img-fluid rounded-start" style="width:150px"
                        :alt="exchangePd.name" title="exchangePd.name">
                    </div>
                    <div class="col-12">
                      <div>
                        <div class="text-gradient d-inline">商品名稱:</div>
                        <div class="d-inline ms-2 coupon">
                          {{exchangePd.name}}</div>
                      </div>
                    </div>
                  </div>
                </div>
              </section>
              <section v-else>
                <h5 class="text-center text-gradient mt-2 mb-0">請向店家出示此優惠碼</h5>
                <img :src="couponRes" alt="QR Code" class="col-12 text-gradient text-center">
              </section>
              <div class="modal-footer">
                <button v-if="couponRes == ''" class="btn btn-gradient p-0 text-align-center"
                  style="width:100px;height:45px" @@click="confirmUseCoupon()">確認使用</button>
                <button class="btn btn-secondary p-0 text-align-center" style="width:100px;height:45px"
                  data-bs-dismiss="modal" @@click="couponRes = '';showCoupons()">{{couponRes == '' ? '取消' :
                  '關閉'}}</button>
              </div>
            </div>
          </div>
        </div>
        <!-- Modal -->
      </section>
      <!-- ------------coupon------------ -->


      <!-- ------------history------------ -->
      <section v-else-if="strPoint == 'pointsHistory' && !isLoading" v-cloak>
        <section v-if="isMg == true">
          <div class="d-flex align-items-center">
            <label for="pdSearch" class="text-gradient form-label m-0">關鍵字:</label>
            <input id="pdSearch" ref="pdSearch" class="form-control ms-2 me-2 w-25" autocomplete="off"
              @@change="this.$refs.pdSearch.value = this.$refs.pdSearch.value.trim()" />
            <span id="schCate" class="d-flex align-items-center">
              <input type="radio" id="Id" name="schCate" value="id" v-model="searchTerm.searchBy"
                class="m-0 me-1 form-check-input" checked />
              <label for="Id" class="me-1 mb-0">交易編號</label>
              <input type="radio" id="mId" name="schCate" value="mId" v-model="searchTerm.searchBy"
                class="m-0 me-1 form-check-input" />
              <label for="mId" class="me-1 mb-0">會員編號</label>
            </span>
            <button class="btn btn-gradient me-1"
              @@click="searchTerm.keyword = this.$refs.pdSearch.value.trim();showCoupons()">搜尋</button>
            <button class="btn btn-gradient"
              @@click="searchTerm.keyword = null;this.$refs.pdSearch.value = '';showCoupons()">清除搜尋</button>
          </div>
        </section>
        <div class="d-flex justify-content-end align-items-center">
          <span class="me-2">每頁顯示<select v-model="searchTerm.pgSize" @@change="showCoupons()">
              <option value="10">10</option>
              <option value="25">25</option>
              <option value="50">50</option>
              <option value="100">100</option>
            </select>筆資料。</span>
          <button class="btn btn-gradient me-1 p-0" @@click="pP" style="width: 30px; height: 30px; text-align: center"
            :disabled="firstPage">
            上
          </button>
          第
          <input class="me-1 p-0" v-model="searchTerm.pgNum" @@change="showCoupons()"
            style="width: 30px; height: 30px; text-align: center" min="1" />
          頁，共<span>{{ results.totalPg }}</span>頁
          <button class="btn btn-gradient me-1 p-0" @@click="nP" style="width: 30px; height: 30px; text-align: center"
            :disabled="lastPage">
            下
          </button>
        </div>

        <div class="col-12" id="pointsHistoryContentBody">
          <!-- ------------MG------------ -->
          <section v-if="isMg == true">
            <section v-if="results.totalPg >= 1">
              <div class="d-flex justify-content-between mt-1">
                <button class="btn btn-gradient mb-2 me-1"
                  @@click="isAdding = !isAdding; addTran($event);">新增紀錄</button>
                <button class="btn btn-gradient mb-2 me-1" @@click="saveEditTrans">儲存修改</button>
                <button v-if="isAdding" class="btn btn-gradient mb-2 me-1" @@click="saveAddTran">儲存新增</button>
                <button class="btn btn-gradient mb-2 ms-auto" @@click="deleteTrans">刪除勾選紀錄</button>
              </div>
              <div id="requiredContent"></div>
              <table class="table table-striped text-center">
                <thead>
                  <tr>
                    <th v-for="(dName, index) in results.dNames" :key="dName" @@click="changeSort(dName)">
                      <label>{{ dName }}</label>
                      <label v-if="index !== 1" class="uicontainer" :class="index == 0 ? 'sorting' : ''">
                        <input class="sorts" :checked="index == 0"
                          :data-sortBy="index == 0 ? 'id': index == 2 ? 'mid' : index == 3 ? 'tDate' : index == 4 ? 'act' : ''"
                          @@click="($event.target.parentElement?.previousElementSibling ?? null)?.click()"
                          type="checkbox">
                        <svg viewBox="0 0 512 512" height="1em" xmlns="http://www.w3.org/2000/svg" class="chevron-down">
                          <path
                            d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z">
                          </path>
                        </svg>
                      </label>
                    </th>
                    <th style="width:50px;">刪除</th>
                  </tr>
                </thead>
                <tbody>
                  <tr v-if="isAdding" class="align-middle" id="newTranTr">
                    <td></td>
                    <td>
                      <select class="form-control p-0 text-center" v-model="newTran.ProductId" @@blur="addTran($event)">
                        <option disabled value="0">請選擇</option>
                        <option v-for="pid in results.iList" :key="pid" :value="pid">{{ pid }}</option>
                      </select>
                    </td>
                    <td>
                      <select class="form-control p-0 text-center" v-model="newTran.MemberId" @@blur="addTran($event)">
                        <option disabled value="">請選擇</option>
                        <option v-for="mid in results.sList" :key="mid" :value="mid">{{ mid }}</option>
                      </select>
                    </td>
                    <td><input type="date" v-model="newTran.tDate" @@change="$event.target.classList.add('edited')">
                    </td>
                    <td>
                      <select class="form-control p-0 text-center cAct"
                        :class="{'text-success': newTran.Active, 'text-danger': !newTran.Active}"
                        v-model="newTran.Active" @@change="$event.target.classList.add('edited')">
                        <option :value="true" class="text-success">未使用</option>
                        <option :value="false" class="text-danger">已使用</option>
                      </select>
                    </td>
                    <td></td>
                  </tr>
                  <tr v-for="{id,productId,memberId,transactionDate,active,edited} in results.trans" :key="id"
                    class="align-middle">
                    <td>{{id}}</td>
                    <td>{{productId}}</td>
                    <td>{{memberId}}</td>
                    <td>{{new Intl.DateTimeFormat('zh-TW', { year: 'numeric', month: '2-digit', day: '2-digit', hour:
                      '2-digit', minute: '2-digit', second: '2-digit' }).format(new Date(transactionDate))}}</td>
                    <td>
                      <select class="form-control p-0 text-center cAct"
                        :class="{'text-success': active, 'text-danger': !active, 'edited': edited}" :value="active"
                        @@change="editTrans(id, $event)">
                        <option value="true" class="text-success">未使用</option>
                        <option value="false" class="text-danger">已使用</option>
                      </select>
                    </td>
                    <td><input type="checkbox" class="form-check-input"
                        @@change="if (!($event.target.checked)) deleteList = deleteList.filter(id => id != id); else deleteList.push(id);" />
                    </td>
                  </tr>
                </tbody>
              </table>
            </section>
            <section v-else>
              <h3 class="text-gradient">查無交易紀錄!!</h3>
            </section>
          </section>
          <!-- ------------MG------------ -->
          <section v-else-if="results.totalPg >= 1">
            <table class="table table-striped text-center">
              <thead>
                <tr>
                  <th>{{results.dNames[0]}}</th>
                  <th>商品圖片</th>
                  <th>商品名稱</th>
                  <th>商品價格</th>
                  <th>{{results.dNames[3]}}</th>
                  <th>{{results.dNames[4]}}</th>
                </tr>
              </thead>
              <tbody>
                <tr v-for="{id,productId,memberId,transactionDate,active,pd} in results.trans" :key="id"
                  class="align-middle">
                  <td>{{id}}</td>
                  <td><img :src="pd.productImage" class="img-fluid rounded-start" style="width:100px"
                      :alt="pd.productName" :title="pd.productName">
                  </td>
                  <td>{{pd.productName}}
                  </td>
                  <td>{{pd.productPrice}}
                  </td>
                  <td>{{new Intl.DateTimeFormat('zh-TW', { year: 'numeric', month: '2-digit', day: '2-digit', hour:
                    '2-digit', minute: '2-digit', second: '2-digit' }).format(new Date(transactionDate))}}</td>
                  <td :class="{'text-success': active, 'text-danger': !active}">{{active ? '未使用' : '已使用'}}</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section v-else>
            <h3 class="text-gradient">查無交易紀錄!!</h3>
          </section>
        </div>
      </section>
      <!-- ------------history------------ -->
    </div>
  </div>
</div>

@section Scripts {
  <script>
    const token = document.querySelector('input[name="__Antiforgery__Queuely"]').value;

    const { createApp, ref, reactive, onMounted, watch } = Vue;

    const app = createApp({
      setup() {
        //------------變數------------
        var strPoint = ref(strPoints);
        var logoSrc = ref('@Url.Content("~/images/queuely.png")');
        var noImgUrl = ref('@Url.Content("~/images/NoImage.jpg")');
        var dropSmallInterval = ref(null);
        var dropLargeInterval = ref(null);
        var removeTransTimeout = ref(null);
        var isLoading = ref(true);
        //------------商城變數------------
        var firstPage = ref(true);
        var lastPage = ref(false);
        var isMg = ref(false);
        var isAdding = ref(false);
        var exchangeRes = ref('');
        var addCategory = ref(false);
        var deleteList = ref([]);
        const searchTerm = reactive({
          cate: null,
          pgNum: 1,
          pgSize: 10,
          sortBy: null,
          sortType: 'asc',
          keyword: null,
          searchBy: null
        });
        const results = reactive({ totalPg: 0, shops: [], trans: [], userPoints: null, userId: '', sList: [], iList: [], dNames: [] });
        const exchangePd = reactive({ id: 0, img: '', name: '', price: 0 });
        const newPd = reactive({
          ProductId: 0,
          /*ProductName: '',
          ProductPrice: 0,
          Category: '',
          ProductDescription: '',*/
          ProductImage: "NoImage.jpg"
        });
        //------------商城變數------------

        //------------優惠券變數------------
        var couponRes = ref('');
        //------------優惠券變數------------

        //------------交易紀錄變數------------
        const newTran = reactive({
          Id: '0',
          ProductId: 0,
          MemberId: '',
          tDate: null,
          Active: true
        });
        //------------交易紀錄變數------------

        //------------方法------------
        const pointStore = () => {
          isLoading.value = true;
          searchTerm.cate = null;
          searchTerm.pgNum = 1;
          searchTerm.pgSize = 10;
          searchTerm.sortBy = isMG == 'true' ? 'id' : null;
          searchTerm.sortType = 'asc';
          searchTerm.keyword = null;
          searchTerm.searchBy = null;
          strPoint.value = 'pointsShop';
          isAdding.value = false;
          deleteList.value = [];
          sessionStorage.setItem('strPoints', 'pointsShop');
          showProducts();
          setTimeout(() => {
            exchangeModal.addEventListener('hidden.bs.modal', () => {
              if (exchangeRes.value != '') {
                exchangeRes.value = '';
                showProducts();
              }
            });
          }, 1);
        };
        const coupon = () => {
          isLoading.value = true;
          searchTerm.cate = null;
          searchTerm.pgNum = 1;
          searchTerm.pgSize = 10;
          searchTerm.sortBy = null;
          searchTerm.sortType = 'asc';
          searchTerm.keyword = null;
          searchTerm.searchBy = 'id';
          if (sessionStorage.getItem('isManager') == 'true') {
            strPoint.value = 'pointsHistory';
            isAdding.value = false;
            deleteList.value = [];
            sessionStorage.setItem('strPoints', 'pointsHistory');
          }
          else {
            strPoint.value = 'coupon';
            sessionStorage.setItem('strPoints', 'coupon');
            setTimeout(() => {
              couponModal.addEventListener('hidden.bs.modal', () => {
                if (couponRes.value != '') {
                  couponRes.value = '';
                  showCoupons();
                }
              });
            }, 1);
          }
          showCoupons();
        };
        const history = () => {
          isLoading.value = true;
          searchTerm.cate = null;
          searchTerm.pgNum = 1;
          searchTerm.pgSize = 10;
          searchTerm.sortBy = null;
          searchTerm.sortType = 'asc';
          searchTerm.keyword = null;
          searchTerm.searchBy = 'id';
          strPoint.value = 'pointsHistory';
          isAdding.value = false;
          deleteList.value = [];
          sessionStorage.setItem('strPoints', 'pointsHistory');
          showCoupons();
        };

        const dropSmallFunction = () => {
          var strRanLeft = Math.random() * 100 + 'vw;';
          var animationTrans = document.querySelector('#animationTrans');
          animationTrans.insertAdjacentHTML(
            'beforeend',
            `<img class="ball" style="left:${strRanLeft};animation-duration: 0.5s;" src="${logoSrc.value}" />`
          );
        };

        const dropLargeFunction = () => {
          var strRanLeft = Math.random() * 100 + 'vw;';
          var animationTrans = document.querySelector('#animationTrans');
          animationTrans.insertAdjacentHTML(
            'beforeend',
            `<img class="ball" style="left:${strRanLeft}; width:150px; height:150px;animation-duration: 1.0s;" src="${logoSrc.value}" />`
          );
        };

        const dropXL = () => {
          var animationTrans = document.querySelector('#animationTrans');
          animationTrans.insertAdjacentHTML(
            'beforeend',
            `<img class="ball" style="left:50vw; width:100vh; height:100vh;animation-duration: 1.75s;" src="${logoSrc.value}" />`
          );
        };

        const removeTrans = () => {
          var animationTrans = document.querySelector('#animationTrans');
          animationTrans.style.setProperty('animation-name', 'earthquake');
          setTimeout(() => {
            clearInterval(dropSmallInterval.value)
            clearInterval(dropLargeInterval.value)
            animationTrans.animate({ top: '200vh' }, 1000)
          }, 200);

          setTimeout(() => {
            animationTrans.parentElement.remove()
          }, 700);
        };

        const skipTrans = (e) => {
          clearTimeout(removeTransTimeout.value);
          clearInterval(dropSmallInterval.value);
          clearInterval(dropLargeInterval.value);
          e.target.parentElement.remove();
        };

        const pP = () => {
          if (searchTerm.pgNum > 1) {
            searchTerm.pgNum--;
            deleteList.value = [];
            if (strPoint.value == 'pointsShop') {
              showProducts();
            }
            else {
              showCoupons();
            }
          }
        };

        const nP = () => {
          if (searchTerm.pgNum < results.totalPg) {
            searchTerm.pgNum++
            deleteList.value = [];
            if (strPoint.value == 'pointsShop') {
              showProducts();
            }
            else {
              showCoupons();
            }
          }
        };

        const changeSort = (dName) => {
          switch (dName) {
            case `${results.dNames[0]}`:
              if (searchTerm.sortBy !== 'id') {
                searchTerm.sortType = 'asc';
              }
              else if (searchTerm.sortType === 'asc') {
                searchTerm.sortType = 'desc';
              }
              else {
                searchTerm.sortType = 'asc';
              }
              searchTerm.sortBy = 'id';
              break;
            case `${results.dNames[2]}`:
              if (strPoint.value == 'pointsHistory') {
                if (searchTerm.sortBy !== 'mid') {
                  searchTerm.sortType = 'asc';
                }
                else if (searchTerm.sortType === 'asc') {
                  searchTerm.sortType = 'desc';
                }
                else {
                  searchTerm.sortType = 'asc';
                }
                searchTerm.sortBy = 'mid';
              }
              break;
            case `${results.dNames[3]}`:
              if (strPoint.value == 'pointsHistory') {
                if (searchTerm.sortBy !== 'tDate') {
                  searchTerm.sortType = 'asc';
                }
                else if (searchTerm.sortType === 'asc') {
                  searchTerm.sortType = 'desc';
                }
                else {
                  searchTerm.sortType = 'asc';
                }
                searchTerm.sortBy = 'tDate';
              }
              else {
                if (searchTerm.sortBy !== 'price') {
                  searchTerm.sortType = 'asc';
                }
                else if (searchTerm.sortType === 'asc') {
                  searchTerm.sortType = 'desc';
                }
                else {
                  searchTerm.sortType = 'asc';
                }
                searchTerm.sortBy = 'price';
              }
              break;
            case `${results.dNames[4]}`:
              if (strPoint.value == 'pointsHistory') {
                if (searchTerm.sortBy !== 'act') {
                  searchTerm.sortType = 'asc';
                }
                else if (searchTerm.sortType === 'asc') {
                  searchTerm.sortType = 'desc';
                }
                else {
                  searchTerm.sortType = 'asc';
                }
                searchTerm.sortBy = 'act';
              }
              else {
                if (searchTerm.sortBy !== 'cate') {
                  searchTerm.sortType = 'asc';
                }
                else if (searchTerm.sortType === 'asc') {
                  searchTerm.sortType = 'desc';
                }
                else {
                  searchTerm.sortType = 'asc';
                }
                searchTerm.sortBy = 'cate';
              }
              break;
            default:
              break;
          }
          if (strPoint.value == 'pointsHistory') {
            showCoupons();
          }
          else {
            showProducts();
          }
        };


        //------------商城方法------------
        const showProducts = async () => {
          isMg.value = sessionStorage.getItem("isManager") == 'true' ? true : false;
          var pageSize = searchTerm.pgSize;

          if (sessionStorage.getItem('pShop') == null || sessionStorage.getItem('pShopEdited') == 'true') {
            const APIUrl = window.location.origin + '/api/PointsAPI/pointsShop';
            const response = await fetch(APIUrl, {
              method: 'POST',
              body: JSON.stringify(searchTerm),
              credentials: 'include',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': token
              }
            });
            const datas = await response.json();
            //console.log(datas);
            results.totalPg = datas.totalPages;
            results.shops = datas.shops;
            results.userPoints = datas.userPoints;
            results.sList = datas.sList1;
            results.dNames = datas.dNames;
            results.shops.forEach((shop) => {
              shop.productImage = @Url.Content("~/images/") + shop.productImage
            });
            isMg.value = datas.isMg;
            await sessionStorage.setItem('pShop', JSON.stringify(datas));

            results.shops = searchTerm.keyword
              ? results.shops.filter((shop) => shop.productName.toLowerCase().includes(searchTerm.keyword.toLowerCase()))
              : results.shops;

            sessionStorage.removeItem('pShopEdited');
          }
          else {
            const datas = await JSON.parse(sessionStorage.getItem('pShop'));

            results.shops = searchTerm.keyword
              ? datas.shops.filter((shop) => shop.productName.toLowerCase().includes(searchTerm.keyword.toLowerCase()))
              : datas.shops;

            var totalCount = results.shops.length;
            var totalPages = Math.ceil(totalCount / pageSize);
            results.totalPg = totalPages;
            results.userPoints = datas.userPoints;
            results.sList = datas.sList1;
            results.dNames = datas.dNames;
            isMg.value = datas.isMg;
          }

          results.shops = searchTerm.cate != null ? results.shops.filter((shop) => shop.category == searchTerm.cate) : results.shops;

          results.shops.sort((a, b) => {
            switch (searchTerm.sortBy) {
              case "id":
                return searchTerm.sortType === "asc" ? a.productId - b.productId : b.productId - a.productId;
              case "price":
                return searchTerm.sortType === "asc" ? a.productPrice - b.productPrice : b.productPrice - a.productPrice;
              case "cate":
                return searchTerm.sortType === "asc" ? a.category.localeCompare(b.category) || a.productPrice - b.productPrice : b.category.localeCompare(a.category) || a.productPrice - b.productPrice;
              default:
                return searchTerm.sortType === "asc" ? a.category.localeCompare(b.category) || a.productPrice - b.productPrice : b.category.localeCompare(a.category) || a.productPrice - b.productPrice;
            }
          });

          if (sessionStorage.getItem('userPointsEdited') == 'true') {
            const APIUrl = window.location.origin + '/api/PointsAPI/userPoints';
            const response = await fetch(APIUrl, {
              method: 'GET'
            });
            const userPoints = await response.json();
            const datas = await JSON.parse(sessionStorage.getItem('pShop'));
            if (userPoints != -1) {
              datas.userPoints = results.userPoints = userPoints;
            }
            else {
              datas.userPoints = results.userPoints = null;
            }

            await sessionStorage.setItem('pShop', JSON.stringify(datas));
            sessionStorage.removeItem('userPointsEdited');
          }

          if (results.totalPg <= 1) {
            searchTerm.pgNum = 1;
            firstPage.value = true;
            lastPage.value = true;
          } else if (searchTerm.pgNum < results.totalPg) {
            lastPage.value = false;
          }
          if (searchTerm.pgNum > results.totalPg) {
            searchTerm.pgNum = results.totalPg;
          }

          var pageNum = searchTerm.pgNum;
          var pageSize = searchTerm.pgSize;
          var skipCount = (pageNum - 1) * pageSize;

          results.shops = results.shops.slice(skipCount, skipCount + pageSize);

          isLoading.value = false;
        };

        const pdExchange = (productId) => {
          if (isUser) {
            const product = results.shops.find(p => p.productId === productId)
            exchangePd.id = product.productId
            exchangePd.img = product.productImage
            exchangePd.name = product.productName
            exchangePd.price = product.productPrice
            const modal = new bootstrap.Modal(exchangeModal);
            modal.show();
            exchangeModal.modalInstance = modal;
          }
          else {
            window.location.href = "/Identity/Account/Login";
          }
        };

        const confirmExchange = () => {
          if (isUser) {
            var p = {
              Points: results.userPoints - exchangePd.price,
              ProductId: exchangePd.id,
            };
            fetch(`@Url.Action("pointsShopContentBody", "Points")`, {
              method: "POST",
              body: JSON.stringify(p),
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': token
              }
            }).then(response => {
              return response.text();
            }).then(data => {
              exchangeRes.value = data;
              sessionStorage.setItem('transEdited', 'true');
              sessionStorage.setItem('userPointsEdited', 'true');
              setTimeout(function () {
                //document.querySelector('#exchangeModal').classList.remove('show');
                /*exchangeModal.classList.remove('show');
                exchangeModal.style.display = 'none';
                exchangeModal.removeAttribute('aria-modal');
                exchangeModal.removeAttribute('role');
                exchangeModal.setAttribute('aria-hidden', 'true');

                document.querySelector('.modal-backdrop').classList.remove('show');*/
                //showProducts();
              }, 500);
              setTimeout(function () {
                /*document.querySelector('body').classList.remove('modal-open');
                document.querySelector('body').style = '';
                document.querySelector('.modal-backdrop').remove();
                const event = new Event('hidden.bs.modal');
                exchangeModal.dispatchEvent(event);*/
                //exchangeRes.value = '';
                exchangeModal.modalInstance.hide();
              }, 700);
            }).catch(err => {
              alert(err);
            });
          }
        };

        const editPds = (id, prop, e) => {
          const product = results.shops.find(p => p.productId === id);
          //console.log(e);
          if (e.target.type === 'file' && e.target.files[0]) {
            const file = e.target.files[0]
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = function (e) {
              product[prop] = e.target.result;
              product.newImg = file.name;
              product.file = file;
              product.edited = true;
            };
            //e.target.style.boxShadow = "0 0 3px 3px pink";
            e.target.classList.add('edited');
          }
          else if (e.target.type === 'number') {
            if (isNaN(e.target.value) || e.target.value == '' || e.target.value.indexOf('e') != -1) {
              e.target.value = e.target._value;
            }
            else {
              product.edited = true;
              //e.target.style.boxShadow = "0 0 3px 3px pink";
              e.target.classList.add('edited');
            }
            product[prop] = parseInt(e.target.value);
          }
          else {
            product[prop] = e.target.value;
            product.edited = true;

            const index = e.target.closest("td").cellIndex;
            const thTitle = document.querySelectorAll("th")[index].textContent;
            const pId = e.target.closest("tr").querySelector("td").textContent;
            const required = document.querySelector("#requiredContent");
            const lacked = Array.from(required.querySelectorAll(`p`)).find(p => p.textContent.includes(`商品編號:「${pId}」的「${thTitle}」`));
            if (e.target.value.trim() === '') {
              //e.target.style.boxShadow = "0 0 5px 5px red";
              e.target.classList.add('lacked');
              e.target.classList.remove('edited');
              if (!lacked) {
                required.insertAdjacentHTML("beforeend", `<p class="text-danger">請填寫商品編號:「${pId}」的「${thTitle}」</p>`);
              }
            }
            else {
              //e.target.style.boxShadow = "0 0 3px 3px pink";
              e.target.classList.add('edited');
              e.target.classList.remove('lacked');
              if (lacked) {
                required.removeChild(lacked);
              }
            }
          }
          //console.log(product);
        };

        const saveEditPds = async () => {
          const required = document.querySelector("#requiredContent");
          const lacked = Array.from(required.querySelectorAll(`p`)).find(p => p.textContent.includes(`商品編號`));
          var toast = new bootstrap.Toast(document.querySelector("#liveToast"))
          var toastHeader = document.querySelector("#liveToast>.toast-header");
          var toastBody = document.querySelector("#liveToast>.toast-body");
          //console.log(adding);
          //required.removeChild(adding);
          if (!lacked) {
            isAdding.value = false;
            var pShop = results.shops.filter(p => p.edited == true && p.newImg !== undefined).map(p => ({
              ...p,
              productImage: p.newImg
            }));
            if (pShop.length > 0) {
              saveLoading();
              await pShop.forEach(p => {
                var formData = new FormData();
                var file = p.file;
                var fileName = p.newImg;

                formData.append("image", file, fileName);

                fetch(`@Url.Action("UploadImage", "Points")`, {
                  method: "POST",
                  body: formData,
                  headers: {
                    'X-CSRF-TOKEN': token
                  }
                }).then(function (response) {
                  delete p.newImg;
                  delete p.file;
                  delete p.edited;
                }).catch(function (err) {
                  alert(err);
                });
              });
            }
            await results.shops.filter(p => p.edited && p.newImg === undefined)
              .map(p => {
                const { edited, ...rest } = p; // 使用解構賦值來排除 edited
                return rest;
              }).forEach(p => {
                p.productImage = p.productImage.slice(p.productImage.lastIndexOf("/images/") + "/images/".length);
                pShop.push(p);
              });
            //console.log(pShop);
            if (pShop.length > 0) {
              await fetch(`@Url.Action("EditPointsShop", "Points")`, {
                method: "POST",
                body: JSON.stringify(pShop),
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-TOKEN': token
                }
              }).then(function (response) {
                var count = pShop.length;
                //alert(`${count}筆資料已修改`);
                toastHeader.innerHTML = `<strong class="me-auto">修改資料成功</strong><button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>`
                toastBody.textContent = `${count}筆資料已修改`;
                removeSaveLoading();
                toast.show();
                document.querySelectorAll(".edited").forEach(e => {
                  e.classList.remove('edited');
                });
                sessionStorage.setItem('pShopEdited', 'true');
                sessionStorage.setItem('transEdited', 'true');
                showProducts();
              }).catch(function (err) {
                alert(err);
              });
            }
          }
          else {
            toastHeader.innerHTML = `<strong class="me-auto">資料不完整</strong><button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>`
            toastBody.textContent = `請填寫所有必填欄位`;
            toast.show();
          }
        };

        const addPd = (e, prop) => {
          const required = document.querySelector("#requiredContent");
          if (e.type === 'click') {
            if (isAdding.value === false) {
              var lacked = Array.from(required.querySelectorAll(`p`)).filter(p => p.textContent.includes(`新商品的`));
              lacked.forEach(p => required.removeChild(p));
              newPd.ProductImage = "NoImage.jpg"
            }
            else if (e.target.tagName === 'P') {
              var lacked = Array.from(required.querySelectorAll(`p`)).find(p => p.textContent.includes(`新商品的「${results.dNames[4]}」`));
              newPd['Category'] = '';
              if (lacked) {
                required.removeChild(lacked);
              }
            }
          }
          else {
            const index = e.target.closest("td").cellIndex;
            const thTitle = document.querySelectorAll("th")[index].textContent;
            var lacked = Array.from(required.querySelectorAll(`p`)).find(p => p.textContent.includes(`新商品的「${thTitle}」`));
            if (e.target.type === 'file' && e.target.files[0]) {
              const newImg = e.target.previousElementSibling;
              const file = e.target.files[0];
              const reader = new FileReader();
              reader.readAsDataURL(file);
              reader.onload = function (e) {
                newImg.src = e.target.result;
                newPd.ProductImage = file.name;
                newPd.file = file;
              };
              e.target.classList.add('edited');
              e.target.classList.remove('lacked');
              //e.target.style.boxShadow = "0 0 3px 3px pink";
            }
            else if (e.target.type === 'number') {
              if (isNaN(e.target.value) || e.target.value == '' || e.target.value.indexOf('e') != -1) {
                e.target.value = 0;
                e.target.classList.add('edited');
                e.target.classList.remove('lacked');
                //e.target.style.boxShadow = "0 0 3px 3px pink";
                newPd['ProductPrice'] = 0;
                if (lacked) {
                  required.removeChild(lacked);
                }
              }
              else {
                e.target.classList.add('edited');
                e.target.classList.remove('lacked');
                //e.target.style.boxShadow = "0 0 3px 3px pink";
                newPd['ProductPrice'] = e.target.value;
                if (lacked) {
                  required.removeChild(lacked);
                }
              }
            }
            else if (e.target.type === 'select-one') {
              if (addCategory.value === false) {
                if (e.target.value === '') {
                  //e.target.style.boxShadow = "0 0 5px 5px red";
                  e.target.classList.add('lacked');
                  e.target.classList.remove('edited');
                  if (!lacked) {
                    required.insertAdjacentHTML("beforeend", `<p class="text-danger">請填寫新商品的「${thTitle}」</p>`);
                  }
                }
                else {
                  e.target.classList.add('edited');
                  e.target.classList.remove('lacked');
                  //e.target.style.boxShadow = "0 0 3px 3px pink";
                  newPd[prop] = e.target.value;
                  if (lacked) {
                    required.removeChild(lacked);
                  }
                }
              }
            }
            else {
              if (e.target.value.trim() === '') {
                //e.target.style.boxShadow = "0 0 5px 5px red";
                e.target.classList.add('lacked');
                e.target.classList.remove('edited');
                newPd[prop] = '';
                if (!lacked) {
                  required.insertAdjacentHTML("beforeend", `<p class="text-danger">請填寫新商品的「${thTitle}」</p>`);
                }
              }
              else {
                e.target.classList.add('edited');
                e.target.classList.remove('lacked');
                //e.target.style.boxShadow = "0 0 3px 3px pink";
                newPd[prop] = e.target.value;
                if (lacked) {
                  required.removeChild(lacked);
                }
              }
            }
          }
        };

        const saveAddPd = async () => {
          const required = document.querySelector("#requiredContent");
          const newPdTr = document.querySelector("#newPd");
          var toast = new bootstrap.Toast(document.querySelector("#liveToast"))
          var toastHeader = document.querySelector("#liveToast>.toast-header");
          var toastBody = document.querySelector("#liveToast>.toast-body");
          newPdTr.querySelectorAll("input:not([type='file']),select,textarea").forEach(input => {
            const index = input.closest("td").cellIndex;
            const thTitle = document.querySelectorAll("th")[index].textContent;
            var lacked = Array.from(required.querySelectorAll(`p`)).find(p => p.textContent.includes(`新商品的「${thTitle}」`));
            if (input.value.trim() === '') {
              //input.style.boxShadow = "0 0 5px 5px red";
              input.classList.add('lacked');
              if (!lacked) {
                required.insertAdjacentHTML("beforeend", `<p class="text-danger">請填寫新商品的「${thTitle}」</p>`);
              }
            }
            else {
              if (lacked) {
                input.classList.remove('lacked');
                input.classList.add('edited');
                required.removeChild(lacked);
              }
            }
          });
          var lacked = Array.from(required.querySelectorAll(`p`)).find(p => p.textContent.includes(`新商品的`));
          if (!lacked) {
            saveLoading();
            var pShop = [];
            if (newPd.file) {
              var formData = new FormData();
              var file = newPd.file;
              var fileName = newPd.file.name;

              formData.append("image", file, fileName);

              await fetch(`@Url.Action("UploadImage", "Points")`, {
                method: "POST",
                body: formData,
                headers: {
                  'X-CSRF-TOKEN': token
                }
              }).then(function (response) {
                delete newPd.file;
              }).catch(function (err) {
                alert(err);
              });
            }
            pShop.push(newPd);
            await fetch(`@Url.Action("EditPointsShop", "Points")`, {
              method: "POST",
              body: JSON.stringify(pShop),
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': token
              }
            }).then(function (response) {
              var count = pShop.length;
              //alert(`${count}筆資料已新增`);
              toastHeader.innerHTML = `<strong class="me-auto">新建資料成功</strong><button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>`
              toastBody.textContent = `${count}筆資料已新增`;
              removeSaveLoading();
              toast.show();
              isAdding.value = false;
              delete newPd.ProductName;
              delete newPd.ProductPrice;
              delete newPd.Category;
              delete newPd.ProductDescription;
              newPd.ProductImage = "NoImage.jpg";
              sessionStorage.setItem('pShopEdited', 'true');
              sessionStorage.setItem('transEdited', 'true');
              showProducts();
            }).catch(function (err) {
              alert(err);
            });
          }
          else {
            toastHeader.innerHTML = `<strong class="me-auto">資料不完整</strong><button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>`
            toastBody.textContent = `請填寫所有必填欄位`;
            toast.show();
          }
        };

        const deletePds = async () => {
          var toast = new bootstrap.Toast(document.querySelector("#liveToast"));
          var toastHeader = document.querySelector("#liveToast>.toast-header");
          var toastBody = document.querySelector("#liveToast>.toast-body");
          //console.log(deleteList.value);
          var ids = deleteList.value.sort((a, b) => a - b);
          var fileNames = await results.shops.filter(p => ids.includes(p.productId)).map(p => (p.productImage.slice(p.productImage.lastIndexOf("/images/") + "/images/".length) != 'NoImage.jpg'));
          var strIds = ids.join(", ");
          if (deleteList.value.length > 0) {
            /*console.log(strIds);
            console.log(ids);*/
            console.log(fileNames);
            var result = confirm(`確定要刪除編號「${strIds}」的商品嗎?`);
            // console.log(result);
            if (result) {
              saveLoading();
              if (fileNames[0]) {
                await fetch(`@Url.Action("DeleteImage", "Points")`, {
                  method: "DELETE",
                  body: JSON.stringify(fileNames),
                  headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': token
                  }
                }).then(function (response) {
                  // console.log(response);
                }).catch(function (err) {
                  alert(err);
                });
              };

              await fetch(`@Url.Action("DeletePointsShop", "Points")`, {
                method: "POST",
                body: JSON.stringify(ids),
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-TOKEN': token
                }
              }).then(function (response) {
                var count = ids.length;
                toastHeader.innerHTML = `<strong class="me-auto">刪除資料成功</strong><button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>`
                toastBody.textContent = `${count}筆資料已刪除`;
                removeSaveLoading();
                toast.show();
                deleteList.value = [];
                sessionStorage.setItem('pShopEdited', 'true');
                sessionStorage.setItem('transEdited', 'true');
                showProducts();
              }).catch(function (err) {
                alert(err);
              });
            }
            else {
            }
          }
        };

        //------------商城方法------------

        //------------優惠券方法------------

        const showCoupons = async () => {
          isMg.value = sessionStorage.getItem("isManager") == 'true' ? true : false;
          var pageSize = searchTerm.pgSize;

          if (isUser == 'true' || isMg.value == true) {
            if (sessionStorage.getItem('trans') == null || sessionStorage.getItem('transEdited') == 'true') {
              const APIUrl = window.location.origin + '/api/PointsAPI/coupon';
              const response = await fetch(APIUrl, {
                method: 'POST',
                body: JSON.stringify(searchTerm),
                credentials: 'include',
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-TOKEN': token
                }
              });
              const datas = await response.json();
              //console.log(datas)
              results.totalPg = datas.totalPages;
              results.trans = datas.trans;
              results.sList = datas.sList1;
              results.iList = datas.iList1;
              results.dNames = datas.dNames;
              results.userId = datas.userId;
              results.shops = datas.shops;
              results.shops.forEach((shop) => {
                shop.productImage = @Url.Content("~/images/") + shop.productImage;
              });
              results.trans.forEach((tran) => {
                tran.pd = results.shops.find(p => p.productId === tran.productId);
              });
              isMg.value = datas.isMg;
              await sessionStorage.setItem('trans', JSON.stringify(datas));

              if (strPoint.value == 'coupon' && isMg.value == false) {
                results.trans = results.trans.filter(t => t.memberId == results.userId && t.active == true);
              }
              else if (searchTerm.keyword != null) {
                if (searchTerm.searchBy == 'id') {
                  results.trans = results.trans.filter(t => t.id == searchTerm.keyword);
                }
                else {
                  results.trans = results.trans.filter(t => t.memberId.toLowerCase().includes(searchTerm.keyword.toLowerCase()));
                }
              }
              else {
                results.trans = results.trans;
              }

              sessionStorage.removeItem('transEdited');
            }
            else {
              const datas = await JSON.parse(sessionStorage.getItem('trans'));

              if (isMg.value == false) {
                results.trans = strPoint.value == 'coupon' ? datas.trans.filter(t => t.memberId == datas.userId && t.active == true) : datas.trans.filter(t => t.memberId == datas.userId);
              }
              else if (searchTerm.keyword != null) {
                if (searchTerm.searchBy == 'id') {
                  results.trans = datas.trans.filter(t => t.id == searchTerm.keyword);
                }
                else {
                  results.trans = datas.trans.filter(t => t.memberId.toLowerCase().includes(searchTerm.keyword.toLowerCase()));
                }
              }
              else {
                results.trans = datas.trans;
              }
              var totalCount = results.trans.length;
              var totalPages = Math.ceil(totalCount / pageSize);
              results.totalPg = totalPages;
              results.sList = datas.sList1;
              results.iList = datas.iList1;
              results.dNames = datas.dNames;
              results.userId = datas.userId;
              results.shops = datas.shops;
              isMg.value = datas.isMg;
              /*results.shops.forEach((shop) => {
                shop.productImage = @Url.Content("~/images/") + shop.productImage
              });*/
            }

            results.trans.sort((a, b) => {
              switch (searchTerm.sortBy) {
                case "id":
                  return searchTerm.sortType === "asc" ? a.id - b.id : b.id - a.id;
                case "mid":
                  return searchTerm.sortType === "asc" ? a.memberId.localeCompare(b.memberId) || a.memberId - b.memberId : b.memberId.localeCompare(a.memberId) || a.memberId - b.memberId;
                case "tDate":
                  return searchTerm.sortType === "asc" ? new Date(a.transactionDate) - new Date(b.transactionDate) : new Date(b.transactionDate) - new Date(a.transactionDate);
                case "act":
                  return searchTerm.sortType === "asc" ? a.active - b.active : b.active - a.active;
                default:
                  return searchTerm.sortType === "asc" ? a.id - b.id : b.id - a.id;
              }
            });

            if (results.totalPg <= 1) {
              searchTerm.pgNum = 1;
              firstPage.value = true;
              lastPage.value = true;
            } else if (searchTerm.pgNum < results.totalPg) {
              lastPage.value = false;
            }
            if (searchTerm.pgNum > results.totalPg) {
              searchTerm.pgNum = results.totalPg;
            }

            var pageNum = searchTerm.pgNum;
            var skipCount = (pageNum - 1) * pageSize;

            results.trans = results.trans.slice(skipCount, skipCount + pageSize);

            isLoading.value = false;
          }
          else {
            window.location.href = "/Identity/Account/Login";
          }
        };

        const useCoupon = (product, id) => {
          if (isUser) {
            exchangePd.id = product.productId;
            exchangePd.img = product.productImage;
            exchangePd.name = product.productName;
            exchangePd.price = product.productPrice;
            exchangePd.transId = id;
          }
          else {
            window.location.href = "/Identity/Account/Login";
          }
        };

        const confirmUseCoupon = async () => {
          var tid = exchangePd.transId;
          await fetch(`@Url.Action("couponUse", "Points")`, {
            method: "POST",
            body: JSON.stringify(tid),
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-TOKEN': token
            }
          }).then(response => {
            return response.blob();
          }).then(blob => {
            couponRes.value = URL.createObjectURL(blob);
            sessionStorage.setItem('transEdited', 'true');
          }).catch(err => {
            alert(err);
          });
        }
        //------------優惠券方法------------

        //------------交易紀錄方法------------
        const editTrans = (id, e) => {
          var tran = results.trans.find(t => t.id == id);
          tran.active = e.target.value == 'true' ? true : false;
          tran.edited = true;
        };

        const saveEditTrans = async () => {
          var pTrans = [];
          var toast = new bootstrap.Toast(liveToast);
          await results.trans.filter(t => t.edited).forEach(t => pTrans.push({ Id: `${t.id}`, Active: t.active }));
          if (pTrans.length > 0) {
            saveLoading();
            await fetch(`@Url.Action("EditPointsTran", "Points")`, {
              method: "POST",
              body: JSON.stringify(pTrans),
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': token
              }
            }).then(function (response) {
              var count = pTrans.length;
              //alert(`${count}筆資料已修改`);
              toastHeader.innerHTML = `<strong class="me-auto">修改資料成功</strong><button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>`
              toastBody.textContent = `${count}筆資料已修改`;
              removeSaveLoading();
              toast.show();
              isAdding.value = false;
              sessionStorage.setItem('transEdited', 'true');
              showCoupons();
            }).catch(function (err) {
              alert(err);
            });
          }
        };

        const addTran = (e) => {
          const required = requiredContent;
          if (e.type === 'click') {
            if (!isAdding.value) {
              var lacked = Array.from(required.querySelectorAll(`p`)).filter(p => p.textContent.includes(`新交易紀錄的`));
              lacked.forEach(p => required.removeChild(p));
              newTran.Id = 0;
              newTran.ProductId = 0;
              newTran.MemberId = '';
              newTran.tDate = null;
              newTran.Active = true;
            }
          }
          else if (e.target.value === '0' || e.target.value === '' || e.target.value === null) {
            const index = e.target.closest("td").cellIndex;
            const thTitle = document.querySelectorAll("th")[index].textContent;
            var lacked = Array.from(required.querySelectorAll(`p`)).find(p => p.textContent.includes(`新交易紀錄的「${thTitle}」`));
            e.target.classList.add('lacked');
            e.target.classList.remove('edited');
            if (!lacked) {
              required.insertAdjacentHTML("beforeend", `<p class="text-danger">請填寫新交易紀錄的「${thTitle}」</p>`);
            }
          } else {
            e.target.classList.add('edited');
            e.target.classList.remove('lacked');
            if (lacked) {
              required.removeChild(lacked);
            }
          }
        };

        const saveAddTran = async () => {
          const required = requiredContent;
          var toast = new bootstrap.Toast(liveToast)
          newTranTr.querySelectorAll("select").forEach(input => {
            const index = input.closest("td").cellIndex;
            const thTitle = document.querySelectorAll("th")[index].textContent;
            var lacked = Array.from(required.querySelectorAll(`p`)).find(p => p.textContent.includes(`新交易紀錄的「${thTitle}」`));
            if (input.value === '' || input.value === '0') {
              input.classList.add('lacked');
              if (!lacked) {
                required.insertAdjacentHTML("beforeend", `<p class="text-danger">請填寫新交易紀錄的「${thTitle}」</p>`);
              }
            }
            else {
              if (lacked) {
                input.classList.remove('lacked');
                input.classList.add('edited');
                required.removeChild(lacked);
              }
            }
          });
          var lacked = Array.from(required.querySelectorAll(`p`)).find(p => p.textContent.includes(`新交易紀錄的`));
          if (!lacked) {
            var pTrans = [newTran];
            if (pTrans.length > 0) {
              saveLoading();
              await fetch(`@Url.Action("EditPointsTran", "Points")`, {
                method: "POST",
                body: JSON.stringify(pTrans),
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-TOKEN': token
                }
              }).then(function (response) {
                var count = pTrans.length;
                //alert(`${count}筆資料已新增`);
                toastHeader.innerHTML = `<strong class="me-auto">新增資料成功</strong><button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>`
                toastBody.textContent = `${count}筆資料已新增`;
                removeSaveLoading();
                toast.show();
                isAdding.value = false;
                newTran.ProductId = 0;
                newTran.MemberId = '';
                newTran.tDate = null;
                newTran.Active = true;
                sessionStorage.setItem('transEdited', 'true');
                showCoupons();
              }).catch(function (err) {
                alert(err);
              });
            }
          }
        };

        const deleteTrans = async () => {
          var toast = new bootstrap.Toast(liveToast);
          //console.log(deleteList.value);
          var ids = deleteList.value.sort((a, b) => a - b);
          var strIds = ids.join(", ");
          if (deleteList.value.length > 0) {
            var result = confirm(`確定要刪除編號「${strIds}」的交易紀錄嗎?`);
            // console.log(result);
            if (result) {
              saveLoading();
              await fetch(`@Url.Action("DeletePointsTran", "Points")`, {
                method: "POST",
                body: JSON.stringify(ids),
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-TOKEN': token
                }
              }).then(function (response) {
                var count = ids.length;
                toastHeader.innerHTML = `<strong class="me-auto">刪除資料成功</strong><button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>`
                toastBody.textContent = `${count}筆資料已刪除`;
                removeSaveLoading();
                toast.show();
                deleteList.value = [];
                sessionStorage.setItem('transEdited', 'true');
                showCoupons();
              }).catch(function (err) {
                alert(err);
              });
            }
            else {
            }
          }
        };

        //------------交易紀錄方法------------

        onMounted(() => {
          //console.log(strPoints);
          dropSmallInterval.value = setInterval(dropSmallFunction, 50);
          dropLargeInterval.value = setInterval(dropLargeFunction, 100);
          setTimeout(() => {
            dropXL();
          }, 50);
          removeTransTimeout.value = setTimeout(() => {
            removeTrans();
          }, 1800);
          //------------商城方法------------
          if (isMG == 'true') {
            searchTerm.sortBy = 'id';
          }
          else {
            searchTerm.sortBy = 'cate';
          }
          //------------商城方法------------

          if (strPoint.value == 'pointsShop') {
            showProducts();
            setTimeout(() => {
              exchangeModal.addEventListener('hidden.bs.modal', () => {
                if (exchangeRes.value != '') {
                  exchangeRes.value = '';
                  showProducts();
                }
              });
            }, 1);
          }
          else if (strPoint.value == 'pointsHistory' || isMG == 'true') {
            strPoint.value = 'pointsHistory'
            sessionStorage.setItem('strPoints', 'pointsHistory');
            showCoupons();
          }
          else {
            showCoupons();
            setTimeout(() => {
              couponModal.addEventListener('hidden.bs.modal', () => {
                if (couponRes.value != '') {
                  couponRes.value = '';
                  showCoupons();
                }
              });
            }, 1);
          }
        });

        watch(searchTerm, () => {
          if (isNaN(searchTerm.pgNum) || searchTerm.pgNum < 1) {
            searchTerm.pgNum = 1
          }
          if (searchTerm.pgNum > results.totalPg && results.totalPg > 0) {
            searchTerm.pgNum = results.totalPg
          }
          if (searchTerm.pgNum === 1) {
            firstPage.value = true
          } else {
            firstPage.value = false
          }
          if (searchTerm.pgNum === results.totalPg) {
            lastPage.value = true
          } else {
            lastPage.value = false
          }

          document.querySelectorAll(".sorts").forEach(e => {
            const sortBy = e.getAttribute('data-sortBy');
            if (sortBy == searchTerm.sortBy) {
              e.parentElement.classList.add('sorting');
              if (searchTerm.sortType == 'asc') {
                e.checked = true;
              }
              else {
                e.checked = false;
              }
            }
            else {
              e.parentElement.classList.remove('sorting');
              e.checked = false;
            }
          });
        })

        return {
          strPoint,
          logoSrc,
          noImgUrl,
          dropSmallInterval,
          dropLargeInterval,
          removeTransTimeout,
          isLoading,
          pointStore,
          coupon,
          history,
          dropSmallFunction,
          dropLargeFunction,
          dropXL,
          removeTrans,
          skipTrans,
          pP,
          nP,
          changeSort,
          //------------商城------------
          firstPage,
          lastPage,
          isMg,
          isAdding,
          exchangeRes,
          addCategory,
          deleteList,
          results,
          exchangePd,
          searchTerm,
          newPd,
          showProducts,
          pdExchange,
          confirmExchange,
          editPds,
          saveEditPds,
          addPd,
          saveAddPd,
          deletePds,
          //------------商城------------
          //------------優惠券------------
          couponRes,
          showCoupons,
          useCoupon,
          confirmUseCoupon,
          //------------優惠券------------
          //------------交易紀錄------------
          newTran,
          editTrans,
          saveEditTrans,
          addTran,
          saveAddTran,
          deleteTrans
          //------------交易紀錄------------
        }
      }
    });
    app.mount('#PointsApp');

  </script>
}
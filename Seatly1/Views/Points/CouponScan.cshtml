@section Styles {
    <style>
        section {
            padding: 0 !important;
        }

        [v-cloak] {
            display: none;
        }

        .table {
            --bs-table-striped-bg: rgba(231, 49, 64, 0.05);
        }
    </style>
}

@{
    ViewData["Title"] = "優惠券掃描";
}

@* 防偽標籤 生成(會是個 input hidden 元素) *@
@Html.AntiForgeryToken()

<div id="CouponScanApp">
    <div class="row">
        <div class="col-12 col-md-3">
            <h2 class="text-gradient">掃描使用優惠券</h2>
        </div>
    </div>
    <table class="table table-striped text-center">
        <tr>
            <th>優惠券編號</th>
            <th>商品編號</th>
            <th>商品名稱</th>
            <th>商品圖片</th>
            <th>會員編號</th>
            <th>兌換狀態</th>
        </tr>
        <tr v-for="{Trans,Shops} in coupons" :key="Trans">
            <td>{{Trans[0].Id}}</td>
            <td>{{Trans[0].ProductId}}</td>
            <td>{{Shops[0].ProductName}}</td>
            <td><img :src="Shops[0].ProductImage" class="img-fluid rounded" style="width:100px"
                    :alt="Shops[0].ProductName" :title="Shops[0].ProductName">
            </td>
            <td>{{Trans[0].MemberId}}</td>
            <td :class="Trans[0].Active ? 'text-success' : 'text-danger'">{{Trans[0].Active ? '使用成功': '該兌換券已被使用'}}</td>
        </tr>
    </table>
    <button class="btn btn-gradient p-0 text-align-center" style="height:45px;" @@click="QRCodeScan">點擊掃描QR
        Code</button>
    <video id="preview" class="d-none"></video>
    <div id="reader" style="width: 300px;"></div>
</div>

@section Scripts {
    <script src="https://unpkg.com/html5-qrcode@2.3.8/html5-qrcode.min.js"></script>
    <script>
        const token = document.querySelector('input[name="__Antiforgery__Queuely"]').value;

        const { createApp, ref, reactive, onMounted, watch } = Vue;

        const app = createApp({
            setup() {
                var coupons = ref([]);

                const html5QrCode = ref(null);

                const qrCodeSuccessCallback = async (decodedText, decodedResult) => {
                    // Handle the decoded text here
                    //console.log(`QR Code detected: ${decodedText}`);

                    // Do something with the decoded text, e.g., add to coupons

                    var toast = new bootstrap.Toast(liveToast)
                    var response = await fetch(`@Url.Action("CouponScan", "Points")`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': token
                        },
                        body: decodedText
                    });
                    var result = await response.json();
                    console.log(result);
                    if (result == '查無優惠券') {
                        toastHeader.innerHTML = `<strong class="me-auto">優惠券錯誤!</strong><button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>`
                        toastBody.textContent = `查無優惠券!`;
                    }
                    else {
                        result.Shops.map(s => s.ProductImage = @Url.Content("~/images/") + s.ProductImage);
                        if (result.Trans[0].Active) {
                            toastHeader.innerHTML = `<strong class="me-auto">兌換成功!</strong><button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>`
                            toastBody.textContent = `優惠券可使用`;
                            sessionStorage.setItem('transEdited', 'true');
                        }
                        else {
                            toastHeader.innerHTML = `<strong class="me-auto">兌換失敗!</strong><button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>`
                            toastBody.textContent = `此優惠券已被使用`;
                        }
                        if (!coupons.value.some(c => JSON.stringify(c) === JSON.stringify(result))) {
                            coupons.value.push(result);
                        }
                    }
                    toast.show();

                    html5QrCode.value.stop();
                };
                const QRCodeScan = async () => {
                    const config = { fps: 10, qrbox: 250 };

                    // Start scanning
                    html5QrCode.value.start({ facingMode: "environment" }, config, qrCodeSuccessCallback)
                        .catch(err => {
                            console.error(`Error starting QR code scanner: ${err}`);
                        });
                }

                onMounted(() => {
                    html5QrCode.value = new Html5Qrcode("reader");
                });

                return {
                    coupons,
                    QRCodeScan,
                    html5QrCode,
                    //qrCodeSuccessCallback
                }
            }
        });
        app.mount('#CouponScanApp');
    </script>
}